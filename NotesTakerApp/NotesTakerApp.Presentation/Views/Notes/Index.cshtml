@model IEnumerable<NotesTakerApp.Core.Models.Note>
@{
    ViewData["Title"] = "Notes";
}

<main role="main" class="pb-3">
    <h3 class="text-center mt-5">Welcome to Notes</h3>

    <form asp-action="Create" method="post" asp-controller="Notes" class="text-center mt-3">
        <input type="text" name="Title" placeholder="New note title..." class="form-control" required style="max-width: 300px; margin: 10px auto;" />
        <button type="submit" class="btn btn-success w-100 mt-2" style="max-width: 300px; margin: 10px auto;">+ Add Note</button>
    </form>

    <h5 class="text-center text-muted mb-3 mt-4">ALL NOTES</h5>

    <ul class="list-unstyled m-0 p-0">
        @foreach (var note in Model)
        {
            <li class="mb-3 text-center">
                <div style="
                    display: inline-block;
                    width: 300px;
                    padding: 16px 20px;
                    background-color: #fffff0;
                    border-radius: 8px;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.12);
                    font-size: 1rem;
                    text-align: left;
                    position: relative;
                    cursor: pointer;
                "
                     data-note-id="@note.Id">

                    <!-- Title -->
                    <strong class="note-title" style="display: block; margin-bottom: 6px; font-size: 1.1rem;">
                        @(string.IsNullOrEmpty(note.Title) ? "Untitled" : note.Title)
                    </strong>
                    <small style="color: #666;">Created @note.CreatedAt.ToString("dd.MM.yyyy HH:mm")</small>

                    <!-- Action Icons -->
                    <div style="position: absolute; top: 10px; right: 10px; pointer-events: none;">
                        <i class="bi bi-pencil edit-icon" title="Edit"
                           style="margin-right: 10px; color: #0d6efd; cursor: pointer; pointer-events: auto;"></i>
                        <i class="bi bi-trash delete-icon" title="Delete"
                           style="color: #dc3545; cursor: pointer; pointer-events: auto;"></i>
                    </div>
                </div>
            </li>
        }
    </ul>
</main>

@section Scripts {
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            // DELETE
            document.querySelectorAll(".delete-icon").forEach(icon => {
                icon.addEventListener("click", async (e) => {
                    e.stopPropagation(); // Prevent navigation
                    const noteDiv = icon.closest("div[data-note-id]");
                    const noteId = noteDiv.getAttribute("data-note-id");

                    if (confirm("Are you sure you want to delete this note?")) {
                        // Send the delete request using POST
                        const response = await fetch(`/Notes/Delete/${noteId}`, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify({ id: noteId })
                        });

                        if (response.ok) {
                            noteDiv.parentElement.remove(); // Remove the note from the DOM
                        } else {
                            alert("Failed to delete note.");
                        }
                    }
                });
            });

            // EDIT
            document.querySelectorAll(".edit-icon").forEach(icon => {
                icon.addEventListener("click", (e) => {
                    e.stopPropagation(); // Prevent triggering Details navigation
                    const noteDiv = icon.closest("div[data-note-id]");
                    const noteId = noteDiv.getAttribute("data-note-id");
                    const titleElem = noteDiv.querySelector(".note-title");

                    // Avoid adding multiple inputs
                    if (noteDiv.querySelector("input.edit-title-input")) return;

                    const oldTitle = titleElem.textContent;
                    const input = document.createElement("input");
                    input.type = "text";
                    input.value = oldTitle;
                    input.className = "form-control edit-title-input";
                    input.style.cssText = `
                        font-size: 1.1rem;
                        margin-bottom: 6px;
                        border-radius: 6px;
                        padding: 6px 10px;
                        box-shadow: none;
                        border: 1px solid #ccc;
                    `;

                    titleElem.replaceWith(input);
                    input.focus();

                    // On blur, save or revert
                    input.addEventListener("blur", async () => {
                        const newTitle = input.value.trim();

                        if (newTitle && newTitle !== oldTitle) {
                            const response = await fetch(`/Notes/EditTitle/${noteId}`, {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({ title: newTitle })
                            });

                            if (response.ok) {
                                const newTitleElem = document.createElement("strong");
                                newTitleElem.className = "note-title";
                                newTitleElem.style.cssText = "display: block; margin-bottom: 6px; font-size: 1.1rem;";
                                newTitleElem.textContent = newTitle;
                                input.replaceWith(newTitleElem);
                            } else {
                                alert("Failed to update title.");
                                restoreOldTitle();
                            }
                        } else {
                            restoreOldTitle();
                        }

                        function restoreOldTitle() {
                            const original = document.createElement("strong");
                            original.className = "note-title";
                            original.style.cssText = "display: block; margin-bottom: 6px; font-size: 1.1rem;";
                            original.textContent = oldTitle;
                            input.replaceWith(original);
                        }
                    });

                    // Optional: Submit on Enter
                    input.addEventListener("keydown", (e) => {
                        if (e.key === "Enter") {
                            input.blur();
                        } else if (e.key === "Escape") {
                            input.value = oldTitle;
                            input.blur();
                        }
                    });
                });
            });

            // Navigate to Details when clicking on a note div (outside Edit/Delete icons)
            document.querySelectorAll("div[data-note-id]").forEach(div => {
                div.addEventListener("click", (e) => {
                    // Only navigate if the click is outside the Edit/Delete buttons
                    if (!e.target.closest(".edit-icon") && !e.target.closest(".delete-icon")) {
                        const noteId = div.getAttribute("data-note-id");
                        window.location.href = `/Notes/Details/${noteId}`;
                    }
                });
            });
        });
    </script>
}
