@model IEnumerable<NotesTakerApp.Core.Models.Note>
@{
    ViewData["Title"] = "Notes";
}

<main role="main" class="pb-3">
    <h3 class="text-center mt-5">Welcome to Notes</h3>

    <form asp-action="Create" method="post" asp-controller="Notes" class="text-center mt-3">
        <input type="text" name="Title" placeholder="New note title..." class="form-control" required style="max-width: 300px; margin: 10px auto;" />
        <button type="submit" class="btn btn-success w-100 mt-2" style="max-width: 300px; margin: 10px auto;">+ Add Note</button>
    </form>

    <h5 class="text-center text-muted mb-3 mt-4">ALL NOTES</h5>

    <ul class="list-unstyled m-0 p-0">
        @foreach (var note in Model)
        {
            <li class="mb-3 text-center">
                <div style="
                    display: inline-block;
    using Microsoft.EntityFrameworkCore.Metadata.Internal;
                    width: 500px;
                    padding: 16px 20px;
                    background-color: #fffff0;
                    border-radius: 8px;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.12);
                    font-size: 1rem;
                    text-align: left;
                    position: relative;
                    cursor: pointer;
                "
                     data-note-id="@note.Id">

                    <strong class="note-title" style="display: block; margin-bottom: 6px; font-size: 1.1rem;">
                        @(string.IsNullOrEmpty(note.Title) ? "Untitled" : note.Title)
                    </strong>
                    <small style="color: #666;">Created @note.CreatedAt.ToString("dd.MM.yyyy HH:mm")</small>

                    <div style="position: absolute; top: 10px; right: 10px; display: flex; gap: 10px;">
                        <i class="bi bi-people-fill contributors-icon"
                            title="View Contributors"
                            data-note-id="@note.Id"
                            style="color: #198754; cursor: pointer;"></i>

                        <i class="bi bi-pencil edit-icon" title="Edit"
                           style="color: #0d6efd; cursor: pointer; pointer-events: auto;"></i>
                        <i class="bi bi-trash delete-icon" title="Delete"
                           style="color: #dc3545; cursor: pointer; pointer-events: auto;"></i>
                    </div>
                </div>
            </li>
        }
    </ul>

    <div class="modal fade" id="usersModal" tabindex="-1" aria-labelledby="usersModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="usersModalLabel">Share Note With...</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <ul class="list-group" id="usersList">
                        <li class="list-group-item">Loading users...</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</main>

@section Scripts {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            document.querySelectorAll(".delete-icon").forEach(icon => {
                icon.addEventListener("click", async (e) => {
                    e.stopPropagation();
                    const noteDiv = icon.closest("div[data-note-id]");
                    const noteId = noteDiv.getAttribute("data-note-id");

                    if (confirm("Are you sure you want to delete this note?")) {
                        const response = await fetch(`/Notes/Delete/${noteId}`, {
                            method: "POST",
                            headers: { "Content-Type": "application/json" }
                        });

                        if (response.ok) {
                            noteDiv.parentElement.remove();
                        } else {
                            alert("Failed to delete note.");
                        }
                    }
                });
            });

            document.querySelectorAll(".edit-icon").forEach(icon => {
                icon.addEventListener("click", (e) => {
                    e.stopPropagation();
                    const noteDiv = icon.closest("div[data-note-id]");
                    const noteId = noteDiv.getAttribute("data-note-id");
                    const titleElem = noteDiv.querySelector(".note-title");

                    if (noteDiv.querySelector("input.edit-title-input")) return;

                    const oldTitle = titleElem.textContent;
                    const input = document.createElement("input");
                    input.type = "text";
                    input.value = oldTitle;
                    input.className = "form-control edit-title-input";
                    input.style.cssText = `
                        font-size: 1.1rem;
                        margin-bottom: 6px;
                        border-radius: 6px;
                        padding: 6px 10px;
                        box-shadow: none;
                        border: 1px solid #ccc;
                    `;

                    titleElem.replaceWith(input);

                    input.addEventListener("blur", async () => {
                        const newTitle = input.value.trim();
                        if (newTitle && newTitle !== oldTitle) {
                            const response = await fetch(`/Notes/EditTitle/${noteId}`, {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({ title: newTitle })
                            });

                            if (response.ok) {
                                const newTitleElem = document.createElement("strong");
                                newTitleElem.className = "note-title";
                                newTitleElem.style.cssText = "display: block; margin-bottom: 6px; font-size: 1.1rem;";
                                newTitleElem.textContent = newTitle;
                                input.replaceWith(newTitleElem);
                            } else {
                                alert("Failed to update title.");
                                restoreOldTitle();
                            }
                        } else {
                            restoreOldTitle();
                        }

                        function restoreOldTitle() {
                            const original = document.createElement("strong");
                            original.className = "note-title";
                            original.style.cssText = "display: block; margin-bottom: 6px; font-size: 1.1rem;";
                            original.textContent = oldTitle;
                            input.replaceWith(original);
                        }
                    });

                    input.addEventListener("keydown", (e) => {
                        if (e.key === "Enter") input.blur();
                        else if (e.key === "Escape") {
                            input.value = oldTitle;
                            input.blur();
                        }
                    });
                });
            });

            document.querySelectorAll("div[data-note-id]").forEach(div => {
                div.addEventListener("click", (e) => {
                    if (
    !e.target.closest(".edit-icon") &&
    !e.target.closest(".delete-icon") &&
    !e.target.closest(".contributors-icon")
) {
    const noteId = div.getAttribute("data-note-id");
    window.location.href = `/Notes/Details/${noteId}`;
}
                });
            });

            @* document.getElementById("main").style.filter = "blur()"; *@
            document.querySelectorAll(".contributors-icon").forEach(icon => {
    icon.addEventListener("click", (e) => {
        e.stopPropagation(); 
        const noteDiv = icon.closest("div[data-note-id]");
        const noteId = noteDiv.getAttribute("data-note-id");
        window.location.href = `/Notes/Contributors?noteId=${noteId}`;
    });
});

            async function showUsers(noteId) {
                const modal = new bootstrap.Modal(document.getElementById("usersModal"));
                const usersList = document.getElementById("usersList");
                usersList.innerHTML = "<li class='list-group-item text-center'>Loading...</li>";

                try {
                    const response = await fetch(`/Notes/GetAllUsersExceptOwners?noteId=${noteId}`);
                    if (!response.ok) throw new Error("Failed to fetch users");

                    const users = await response.json();
                    usersList.innerHTML = "";

                    if (users.length === 0) {
                        usersList.innerHTML = "<li class='list-group-item text-muted text-center'>No other users found</li>";
                    } else {
                        users.forEach(user => {
                            const li = document.createElement("li");
                            li.className = "list-group-item list-group-item-action";
                            li.textContent = user.userName || user.email || "Unnamed User";
                            li.style.cursor = "pointer";

                            li.addEventListener("click", async () => {
                                const confirmShare = confirm(`Share this note with ${user.userName || user.email}?`);
                                if (!confirmShare) return;

                                const shareResponse = await fetch("/Notes/ShareNoteWithUser", {
                                    method: "POST",
                                    headers: {
                                        "Content-Type": "application/json"
                                    },
                                    body: JSON.stringify({ noteId, userId: user.id })
                                });

                                if (shareResponse.ok) {
                                    alert("Note shared successfully.");
                                    modal.hide();
                                } else {
                                    alert("Failed to share note.");
                                }
                            });

                            usersList.appendChild(li);
                        });
                    }

                    modal.show();
                } catch (error) {
                    usersList.innerHTML = "<li class='list-group-item text-danger text-center'>Error loading users</li>";
                    modal.show();
                }
            }
        });
    </script>
    <style>
        .modal-backdrop {
    backdrop-filter: none !important;
}
    </style>
}