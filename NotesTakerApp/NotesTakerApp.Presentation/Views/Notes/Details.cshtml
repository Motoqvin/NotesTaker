@model NotesTakerApp.Core.Models.Note

@{
    ViewData["Title"] = "Note Details";
}

<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">

<style>
    body {
        background-color: #f5f6f8;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        padding: 2rem;
        color: #333;
    }

    .note-form {
        display: flex;
        flex-direction: column;
        width: 80%;
        max-width: 1000px;
        margin: 0 auto;
    }

    .note-title {
        font-size: 2rem;
        font-weight: 600;
        text-align: center;
        margin-bottom: 2.5rem;
    }

    #editor-container {
        min-height: 70vh;
        background: white;
        padding: 1rem;
        font-size: 1rem;
        border-radius: 6px;
        border: 1px solid #ccc;
    }

    .btn-save {
        margin-top: 3rem;
        align-self: flex-end;
        padding: 0.75rem 1.5rem;
        border: none;
        background-color: #4f46e5;
        color: white;
        font-size: 1rem;
        border-radius: 6px;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .btn-save:hover {
        background-color: #4338ca;
    }
</style>

<div class="note-form">
    <h3 class="note-title">@Model.Title</h3>

    <form asp-action="Edit" asp-controller="Notes" method="post" onsubmit="syncContent()">
        <input type="hidden" name="Id" value="@Model.Id" />
        <input type="hidden" name="Content" id="hiddenContent" />

        <div id="editor-container">@Html.Raw(Model.Content)</div>

        <button type="submit" class="btn-save">Save</button>
    </form>
</div>

<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>

@section Scripts {
<script>
    const noteId = @Model.Id;
    const quill = new Quill('#editor-container', {
        theme: 'snow',
        placeholder: 'Start typing your note...',
        modules: {
            toolbar: [
                [{ 'header': [1, 2, 3, false] }],
                ['bold', 'italic', 'underline'],
                [{ 'color': [] }, { 'background': [] }],
                [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                ['clean']
            ]
        }
    });

    let lastSentContent = quill.root.innerHTML;

    function syncContent() {
        document.querySelector('#hiddenContent').value = quill.root.innerHTML;
    }

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/notesHub")
        .build();

    connection.on("ReceiveNoteUpdate", function (content) {
        if (quill.root.innerHTML !== content) {
            lastSentContent = content;
            const selection = quill.getSelection();
            quill.root.innerHTML = content;
            if (selection) {
                quill.setSelection(selection.index, selection.length);
            }
        }
    });

    quill.on('text-change', () => {
        const currentContent = quill.root.innerHTML;
        if (currentContent !== lastSentContent) {
            lastSentContent = currentContent;
            connection.invoke("SendNoteUpdate", noteId, currentContent)
                .catch(err => console.error(err.toString()));
        }
    });

    let debounceTimer;
quill.on('text-change', () => {
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(() => {
        const content = quill.root.innerHTML;
        if (content !== lastSentContent) {
            lastSentContent = content;
            connection.invoke("SendNoteUpdate", noteId, content)
                .catch(err => console.error(err.toString()));
        }
    }, 400);
});

    async function startConnection() {
        try {
            await connection.start();
            await connection.invoke("JoinNoteGroup", noteId);
        } catch (err) {
            console.error("Connection failed: ", err);
            setTimeout(startConnection, 3000);
        }
    }

    startConnection();
</script>
}
